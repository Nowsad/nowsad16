/*Author name : nowsad*/
#include <iostream>
#include <string>

using namespace std;
int evaluationTable[6][7] = {{3, 4, 5, 7, 5, 4, 3}, {4, 6, 8, 10, 8, 6, 4}, {5, 8, 11, 13, 11, 8, 5}, {5, 8, 11, 13, 11, 8, 5}, {4, 6, 8, 10, 8, 6, 4}, {3, 4, 5, 7, 5, 4, 3}};
class Board
{
	public:
		const static int rows = 6;
		const static int columns = 7;
		char board[rows][columns];

	public:
		Board(){
			initializeBoard();
			showContent();
		}

		virtual void initializeBoard(){
			for (int i = 0; i < rows; i++)
				for (int j = 0; j < columns; j++)
					board[i][j] = ' ';
		}

		virtual void showContent()
		{
			cout << " 0  1  2  3  4  5  6" << endl;
            for (int row=0; row<6; row++){
                cout << "| ";
                for(int col=0; col<7; col++)
                    cout<<board[row][col]<<" | ";
                cout<<"\n--------------------------------------\n";
            }
		}

		virtual bool insert(int column, wchar_t currentPlayer)
		{
			if (column > 6 || column < 0 || board[0][column] != ' ')
				return false;
			else
			{
				for (int i = rows - 1; i >= 0; i--)
					if (board[i][column] == ' ')
					{
						board[i][column] = currentPlayer;
						break;
					}
				return true;
			}
		}

		virtual void remove(int column)
		{
			for (int i = 0; i < rows; i++)
			{
				if (board[i][column] != ' ')
				{
					board[i][column] = ' ';
					break;
				}
			}
		}
		virtual wchar_t isFinished()
		{
			//check for win horizontally
			for (int row = 0; row < rows; row++)
				for (int col = 0; col < columns - 3; col++)
					if (board[row][col] != ' ' && board[row][col] == board[row][col + 1] && board[row][col] == board[row][col + 2] && board[row][col] == board[row][col + 3])
						return board[row][col];
			//check for win vertically
			for (int row = 0; row < rows - 3; row++)
				for (int col = 0; col < columns; col++)
					if (board[row][col] != ' ' && board[row][col] == board[row + 1][col] && board[row][col] == board[row + 2][col] && board[row][col] == board[row + 3][col])
						return board[row][col];
			//check for win diagonally (upper left to lower right)
			for (int row = 0; row < rows - 3; row++)
				for (int col = 0; col < columns - 3; col++)
					if (board[row][col] != ' ' && board[row][col] == board[row + 1][col + 1] && board[row][col] == board[row + 2][col + 2] && board[row][col] == board[row + 3][col + 3])
						return board[row][col];
			//check for win diagonally (lower left to upper right)
			for (int row = 3; row < rows; row++)
				for (int col = 0; col < columns - 3; col++)
					if (board[row][col] != ' ' && board[row][col] == board[row - 1][col + 1] && board[row][col] == board[row - 2][col + 2] && board[row][col] == board[row - 3][col + 3])
						return board[row][col];
			return ' ';
		}

		virtual bool isTie()
		{
			for (int j = 0; j < columns; j++)
					if (board[0][j] == ' ')
						return false;
			return true;
		}

		virtual bool isLegalMove(int column)
		{
			if (column > 6 || column < 0 || board[0][column] != ' ')
				return false;
			return true;
		}

		virtual int evaluateContent()
		{
			int utility = 128;
			int sum = 0;
			for (int i = 0; i < rows; i++)
				for (int j = 0; j < columns; j++)
					if (board[i][j] == 'O')
						sum += evaluationTable[i][j];
					else if (board[i][j] == 'X')
						sum -= evaluationTable[i][j];
			return utility + sum;
		}
	};


class ComputerPlayer
{
	private:
		wchar_t mySymbol;
		wchar_t opponentSymbol;
		int searchLimit;
		int maxColumn;

	public:
		ComputerPlayer(int limit){
			InitializeInstanceFields();
			searchLimit = limit;
		}

		virtual int miniMaxDecision(Board *board)
		{
			miniMaxValue(board, 0, mySymbol);
			return maxColumn;
		}

	private:
		int miniMaxValue(Board *board, int depth, wchar_t playerToMove){
			if (board->isFinished() != ' ')
				if (board->isFinished() == mySymbol)
					return 255 - depth;
				else
					return 0 + depth;
			if (depth == searchLimit || board->isTie()){
				return board->evaluateContent();
			}
			depth = depth + 1;
			if (playerToMove == mySymbol){
				int max = -2147483647;
				int column = 0;
				for (int i = 0; i < board->columns; i++)
					if (board->isLegalMove(i)){
						board->insert(i, mySymbol);
						int value = miniMaxValue(board, depth, opponentSymbol);
						if (max < value){
							max = value;
							column = i;
						}
						board->remove(i);
					}
				maxColumn = column;
				return max;
			}
			else{
				int min = 2147483647;
				for (int i = 0; i < board->columns; i++)
					if (board->isLegalMove(i))
					{
						board->insert(i, 'X');
						int value = miniMaxValue(board, depth, mySymbol);
						if (min > value)
							min = value;
						board->remove(i);
					}
				return min;
			}
		}

	public:
		virtual int alphaBetaSearch(Board *board)
		{
			maxValue(board, 0, -2147483647, 2147483647);
			return maxColumn;
		}


	private:
		int maxValue(Board *board, int depth, int alpha, int beta)
		{

			if (board->isFinished() != ' ')
				if (board->isFinished() == mySymbol)
					return 255 - depth;
				else
					return 0 + depth;

			if (depth == searchLimit || board->isTie())
				return board->evaluateContent();
			depth = depth + 1;
			int column = 0;
			for (int i = 0; i < board->columns; i++)
			{
				if (board->isLegalMove(i))
				{
					board->insert(i, mySymbol);
					int value = minValue(board, depth, alpha, beta);
					if (value > alpha)
					{
						alpha = value;
						column = i;
					}
					board->remove(i);
					if (alpha >= beta)
						return alpha;
				}
			}
			maxColumn = column;
			return alpha;
		}

		int minValue(Board *board, int depth, int alpha, int beta)
		{
			if (board->isFinished() != ' ')
				if (board->isFinished() == mySymbol)
					return 255 - depth;
				else
					return 0 + depth;
			if (depth == searchLimit || board->isTie())
				return board->evaluateContent();
			depth = depth + 1;
			for (int i = 0; i < board->columns; i++)
			{
				if (board->isLegalMove(i))
				{
					board->insert(i, opponentSymbol);
					int value = maxValue(board, depth, alpha, beta);
					if (value < beta)
						beta = value;
					board->remove(i);
					if (beta <= alpha)
						return beta;
				}
			}
			return beta;
		}

	private:
		void InitializeInstanceFields()
		{
			mySymbol = 'O';
			opponentSymbol = 'X';
		}
};


int main(){
    Board *board = new Board;
    ComputerPlayer *computer;
    wchar_t currentPlayer;
    wchar_t winner;
	int option, userInput;
	cout << "Select search algorithm (1:Minimax, 2:alpha-beta)" << endl;
	cin >> option;
	int limit;
	cout << "Insert cutoff limit (1-8)" << endl;
	cin >> limit;
	computer = new ComputerPlayer(limit);
	wchar_t answer = 'y';

	if (answer == 'y')
		currentPlayer = 'X';
	else
		currentPlayer = 'O';
	do
	{
		int column;
		if (currentPlayer == 'O'){
			if (option == 1){
				column = computer->miniMaxDecision(board);
			}
			else{
				column = computer->alphaBetaSearch(board);
			}
		}
		else{
		    cout << "Insert a Column" << endl;
		    cin >> userInput;
			column = userInput;//static_cast<int>(JOptionPane::showInputDialog("Insert a column"));
		}
		while (!board->insert(column, currentPlayer)){
		    cout << "Insert a Column" << endl;
		    cin >> userInput;
			column = userInput;
			//column = static_cast<int>(JOptionPane::showInputDialog("Insert a column"));
		}
		board->showContent();
		//Change Player
		if (currentPlayer == 'O')
            currentPlayer = 'X';
        else
            currentPlayer = 'O';

		winner = board->isFinished();
	}
	while (winner == ' ' && !board->isTie());
	//Winner
    if (winner == ' ')
        cout << "Nobody won!" << endl;
    else
        cout << "Player " << winner << " won!" << endl;
}

